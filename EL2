# -*- coding: utf-8 -*-
"""
Created on Tue Dec  5 11:39:55 2023

@author: frede
"""

import numpy as np
import h5py
import os
import matplotlib.pyplot as plt
from scipy.signal import savgol_filter
import pandas as pd
#import klepto
from matplotlib.lines import Line2D

def weighted_mean(values, weights):
    if len(values) == 1:
        return values[0], weights[0]
    if type(values) == list:
        values = np.array(values)
        weights = np.array(weights)
    weights = 1 / weights
    weighted_mean = np.sum(values * weights) / np.sum(weights)
    weighted_std = np.sqrt(np.sum(weights * (values - weighted_mean) ** 2) / np.sum(weights))
    return weighted_mean, weighted_std


def plot_polarization_data(wavelengths, data, data_wav, polarization_label, color, weights,file):
    if len(data) > 0:
        dataframe = pd.DataFrame(columns=wavelengths)
        dataframe_weights = pd.DataFrame(columns=wavelengths)
        for i in range(len(data)):
            series = pd.Series(data[i], index=data_wav[i])
            dataframe = pd.concat([dataframe, series.to_frame().T], ignore_index=True)
        for i in range(len(weights)):
            series = pd.Series(weights[i], index=data_wav[i])
            dataframe_weights = pd.concat([dataframe_weights, series.to_frame().T], ignore_index=True)
        dataframe = dataframe.dropna(axis=1)
        dataframe_weights = dataframe_weights.dropna(axis=1)
        for i in range(len(dataframe)):
            alpha_data = dataframe.iloc[i, :]
            wav_data = dataframe.columns.values
            alpha_data = pd.to_numeric(alpha_data, errors='coerce')
            wav_data = pd.to_numeric(wav_data, errors='coerce')
        #    plt.plot(wav_data, alpha_data, f"{color}-", label=f"{polarization_label}")
        #    plt.ylim(20,90)
            #plt.legend()
        #    plt.title(file[i])
        #plt.ylabel('Propagation loss (dB/cm)')
        #plt.xlabel('Wavelength (nm)')
        #plt.show()
        weighted_average_sweep = []
        weighted_std_sweep = []
        for i in range((dataframe.shape[1])):
            column = dataframe.iloc[:, i]
            col_weights = dataframe_weights.iloc[:, i]
            mean, std = weighted_mean(column, col_weights)
            weighted_average_sweep.append(mean)
            weighted_std_sweep.append(std)

        weighted_average_sweep = pd.Series(weighted_average_sweep, index=dataframe_weights.columns)
        weighted_std_sweep = pd.Series(weighted_std_sweep, index=dataframe_weights.columns)
        return dataframe, weighted_average_sweep, weighted_std_sweep
    else:
        return pd.DataFrame(), pd.DataFrame(), pd.DataFrame()

def simple_moving_average(data, window_size):
    weights = np.ones(window_size) / window_size
    sma = np.convolve(data, weights, mode='valid')
    return sma

def load_data(directory,contains,f_ending,threshold,alpha_threshold_high,alpha_threshold_low,r_squared_threshold,window_size):

    TE_raw = []
    TM_raw = []

    TE_file = []
    TM_file = []

    TE_sma = []
    TM_sma = []

    TE_sav = []
    TM_sav = []

    TE_weights_sma = []
    TM_weights_sma = []

    TE_weights_sav = []
    TM_weights_sav = []


    TE_wav_sma = []
    TM_wav_sma = []

    TE_wav_sav = []
    TM_wav_sav = []

    TE_r_squared = []
    TM_r_squared = []

    TE_left_indent = []
    TM_left_indent = []

    TE_sum_width = []
    TM_sum_width = []

    for file in os.listdir(directory):
        if contains.lower() in file.lower() and f_ending.lower() in file.lower():
            #print(file)
            hf = h5py.File(directory + file, 'r')
            wav_nm = np.array(hf.get('wavelength'))
            weights = np.array(hf.get('alpha_variance'))
            left_indent = np.array(hf.get('left_indent'))
            sum_width = np.array(hf.get('sum_width'))
            r_squared = np.array(hf.get('r_squared'))
            alphas = np.array(hf.get('alpha'))
            if threshold:

                indices_above_threshold = np.where(alphas > alpha_threshold_high)[0]
                alphas = alphas[alphas <= alpha_threshold_high]
                wav_nm = np.delete(wav_nm, indices_above_threshold)
                weights = np.delete(weights, indices_above_threshold)
                left_indent = np.delete(left_indent, indices_above_threshold)
                sum_width = np.delete(sum_width, indices_above_threshold)
                r_squared = np.delete(r_squared, indices_above_threshold)

                indices_below_threshold = np.where(alphas < alpha_threshold_low)[0]
                alphas = alphas[alphas >= alpha_threshold_low]
                wav_nm = np.delete(wav_nm, indices_below_threshold)
                weights = np.delete(weights, indices_below_threshold)
                left_indent = np.delete(left_indent, indices_below_threshold)
                sum_width = np.delete(sum_width, indices_below_threshold)
                r_squared = np.delete(r_squared, indices_below_threshold)

                indices_above_threshold = np.where(r_squared < r_squared_threshold)[0]
                alphas = np.delete(alphas,indices_above_threshold)
                wav_nm = np.delete(wav_nm, indices_above_threshold)
                weights = np.delete(weights, indices_above_threshold)
                left_indent = np.delete(left_indent, indices_above_threshold)
                sum_width = np.delete(sum_width, indices_above_threshold)
                r_squared = np.delete(r_squared, indices_above_threshold)

            sma = simple_moving_average(alphas,window_size)
            weights_sma = simple_moving_average(weights,window_size)
            wav_sma = wav_nm[(window_size - 1) // 2 : -(window_size // 2)]
            plt.plot(wav_nm, alphas)
            plt.show()
            y_savgol = savgol_filter(alphas.tolist(), 501, 1, mode="nearest")

            if "TE" in file:
                TE_file.append(file)
                TE_raw.append(list(alphas))
                TE_sma.append(list(sma))
                TE_weights_sma.append(weights_sma)
                TE_wav_sma.append(list(wav_sma))

                TE_sav.append(list(y_savgol))
                TE_weights_sav.append(weights)
                TE_wav_sav.append(([float(x.decode()) for x in wav_nm]))

                TE_r_squared.append(r_squared)
                TE_left_indent.append(left_indent)
                TE_sum_width.append(sum_width)

            else:
                TM_file.append(file)
                TM_raw.append(list(alphas))
                TM_sma.append(list(sma))
                TM_weights_sma.append(weights_sma)
                TM_wav_sma.append(list(wav_sma))

                TM_sav.append(list(y_savgol))
                TM_weights_sav.append(weights)
                TM_wav_sav.append(([float(x.decode()) for x in wav_nm]))

                TM_r_squared.append(r_squared)
                TM_left_indent.append(left_indent)
                TM_sum_width.append(sum_width)
            hf.close()
    return TE_file, TE_raw, TE_sma, TE_weights_sma, TE_wav_sma, TE_sav, TE_weights_sav, TE_wav_sav, TE_r_squared, TE_left_indent, TE_sum_width, TM_file, TM_raw, TM_sma, TM_weights_sma, TM_wav_sma, TM_sav, TM_weights_sav, TM_wav_sav, TM_r_squared, TM_left_indent, TE_sum_width

directory = 'C:/Users/au617007/OneDrive - Aarhus Universitet/Desktop/AlGaAs_Power/'
contains = '10mW'
f_ending = '.h5'
threshold = True
alpha_threshold_high = 100
alpha_threshold_low = 0
r_squared_threshold = 0.0

average = False

#window_size = list(range(10,110,20))
#for i in window_size:
TE_file, TE_raw, TE_sma, TE_weights_sma, TE_wav_sma, TE_sav, TE_weights_sav, TE_wav_sav, TE_r_squared, TE_left_indent, TE_sum_width, TM_file, TM_raw, TM_sma, TM_weights_sma, TM_wav_sma, TM_sav, TM_weights_sav, TM_wav_sav, TM_r_squared, TM_left_indent, TE_sum_width  = load_data(directory,contains,f_ending,threshold,alpha_threshold_high,alpha_threshold_low,r_squared_threshold,20)

for i in range(len(TE_file)):
    plt.scatter(TE_wav_sav[i],TE_r_squared[i])
plt.show()

#for i in range(2):
#    plt.scatter(TE_wav_sma[i],TE_sma[i])
#plt.show()

dataframe_wav = np.round(np.arange(910, 980 + 0.001, 0.1), 1)

plot_fontsize = 15
te_dataframe, te_mean, te_std = plot_polarization_data(dataframe_wav, TE_sma, TE_wav_sma, "TE", "b",TE_weights_sma, TE_file)


tm_dataframe, tm_mean, tm_std = plot_polarization_data(dataframe_wav, TM_sma, TM_wav_sma, "TM", "g",TM_weights_sma, TM_file)
handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys())


tm_mean.index = pd.to_numeric(tm_mean.index, errors='coerce')
te_mean.index = pd.to_numeric(te_mean.index, errors='coerce')

wav = np.arange(910, 980, 5)
wav2 = np.arange(915, 985, 5)

if average:
    te_mean.index = pd.to_numeric(te_mean.index, errors='coerce')

    # Drop rows where the index could not be converted to a number (i.e., NaN values)
    te_mean = te_mean.dropna()

    # Filter the rows where the index is between 930 and 950

    avg_loss = []
    for i in range(len(wav)):

        filtered_series = te_mean[(te_mean.index >= wav[i]) & (te_mean.index <= wav2[i])]

        # Calculate the mean of the filtered Series
        average_value = filtered_series.mean()

        avg_loss.append(round(average_value,2))
    print(avg_loss)

# Plot of the data obtained from using the average method above


c1 = 'k'
c2 = 'b'

plt.plot(te_mean.index, te_mean.values, color=c1, label = 'TE with threshold alpha: ' + '(' + str(alpha_threshold_low) + ':' + str(alpha_threshold_high) + ') ' +  'Rsq :' + str(r_squared_threshold))
plt.fill_between(te_mean.index, te_mean.values - te_std.values, te_mean.values + te_std.values, color=c1, alpha=0.2)
plt.plot(te_mean.index, te_mean.values + te_std.values, linestyle='--', color=c1, alpha=0.2)
plt.plot(te_mean.index, te_mean.values - te_std.values, linestyle='--', color=c1, alpha=0.2)

plt.xlabel('Wavelength (nm)', fontsize=plot_fontsize)
plt.ylabel('Propagation loss (dB/cm)', fontsize=plot_fontsize)

plt.xticks(fontsize=plot_fontsize)
plt.yticks(fontsize=plot_fontsize)
#plt.legend()
plt.show()

#Plot of the data obtained from using the average method above
power = np.arange(10,90,10)

alpha_920_940_1 = [53.56,72.83,70.8,72.54,70.95,73.21,70.88,68.32]
alpha_925_935_1 = [60.2,79.11,75.9,80.36,79.49,85.34,76.58,78.23]

alpha_920_940_2 = [40.56,47.62,41.5,41.93,47.19,45.04,50.24,50.58]
alpha_925_935_2 = [42.29,45.75,41.64,40.66,48.7,45.6,49.09,48.36]

averages_920_940 = [(a + b) / 2 for a, b in zip(alpha_920_940_1, alpha_920_940_2)]
averages_925_935 = [(a + b) / 2 for a, b in zip(alpha_925_935_1, alpha_925_935_2)]
plt.scatter(power, alpha_920_940_1, marker='*', color='r', s=150)
plt.scatter(power, alpha_920_940_2, marker='s', color='r', s=150)
plt.scatter(power, alpha_925_935_1, marker='*', color='k', s=150)
plt.scatter(power, alpha_925_935_2, marker='s', color='k', s=150)
plt.scatter(power,averages_920_940,marker='v',color='b',s=150)
plt.scatter(power,averages_925_935,marker='o',color='b',s=150)

# Custom legend combining both markers
legend_elements = [
    (Line2D([0], [0], marker='*', color='r', linestyle='None', markersize=10),
     Line2D([0], [0], marker='s', color='r', linestyle='None', markersize=10)),
    (Line2D([0], [0], marker='*', color='k', linestyle='None', markersize=10),
     Line2D([0], [0], marker='s', color='k', linestyle='None', markersize=10)),
    (Line2D([0], [0], marker='v', color='b', linestyle='None', markersize=10),
     Line2D([0], [0], marker='o', color='b', linestyle='None', markersize=10))
]

labels = ['Avg. loss 920-940 nm', 'Avg. loss 925-935 nm','Avg. red and black']

# Creating the legend
plt.legend(legend_elements, labels, handler_map={tuple: HandlerTuple(ndivide=None)}, fontsize=14,
           bbox_to_anchor=(0, 1.5), loc='upper left')
plt.xlabel('Power [mW]', fontsize=18)
plt.ylabel('Propagation loss [dB/cm]', fontsize=18)
plt.xticks(fontsize=15)
plt.yticks(fontsize=15)

plt.tight_layout()

plt.show()

#plot the 910-915, 915-920 averages.
    loss_80mW = [71.07, 63.21, 51.35, 56.24, 54.42, 53.26, 47.42, 43.97, 39.22, 37.09, 41.09, 41.46, 42.87, 40.35]
    loss_70mW = [62.59, 61.0, 54.97, 54.33, 47.53, 49.93, 44.02, 43.53, 38.52, 35.79, 40.38, 40.56, 42.37, 40.84]
    loss_60mW = [64.17, 61.56, 48.91, 52.74, 52.21, 51.88, 46.04, 42.32, 37.24, 35.76, 38.96, 40.45, 42.83, 42.3]
    loss_50mW = [64.29, 62.95, 54.37, 55.56, 48.68, 49.26, 45.74, 44.82, 36.56, 36.13, 39.22, 41.19, 39.31, 40.04]
    loss_40mW = [64.83, 59.83, 55.69, 60.27, 54.1, 51.63, 45.65, 43.88, 37.26, 37.6, 39.45, 41.4, 40.06, 40.96]
    loss_30mW = [69.94, 60.78, 54.32, 48.46, 51.89, 46.95, 46.32, 42.83, 37.96, 37.85, 39.62, 40.85, 36.08, 34.67]
    loss_25mW = [51.19, 38.97, 44.64, 41.1, 34.66, 37.19, 34.62, 37.48, 37.86, 31.96, 30.84, 32.1, 33.81, 35.39]
    loss_20mW = [53.0, 49.0, 49.48, 48.0, 49.0, 47.87, 43.42, 40.12, 43.41, 41.17, 42.59, 37.75, 29.32, 28.2]
    loss_15mW = [28.76, 24.28, 22.13, 22.0, 22.69, 26.8, 28.63, 29.95, 33.73, 38.31, 40.48, 38.35, 27.01, 27.09]
    loss_12_5mW = [19.77, 18.02, 18.06, 19.96, 20.65, 21.0, 21.36, 25.73, 28.15, 27.75, 29.85, 33.18, 27.61, 20.75]
    loss_10mW = [34.56, 29.01, 19.19, 17.88, 23.21, 27.07, 27.75, 25.69, 18.54, 17.0, 22.05, 24.02, 25.96, 19.35]

    plt.plot(wav, loss_80mW,label='80mW')
    plt.plot(wav, loss_70mW,label='70mW')
    plt.plot(wav, loss_60mW,label='60mW')
    plt.plot(wav, loss_50mW,label='50mW')
    plt.plot(wav, loss_40mW,label='40mW')
    plt.plot(wav, loss_30mW,label='30mW')
#    plt.plot(wav, loss_25mW,label='25mW')
#    plt.plot(wav, loss_20mW,label='20mW')
#    plt.plot(wav, loss_15mW,label='15mW')
#    plt.plot(wav, loss_12_5mW,label='12.5mW')
#    plt.plot(wav, loss_10mW,label='10mW')
#    plt.legend()
    plt.xlabel('Wavelength [nm]', fontsize=18)
    plt.ylabel('Loss [dB/cm]', fontsize=18)
    plt.xticks(fontsize=15)
    plt.yticks(fontsize=15)

    plt.tight_layout()

    plt.show()
