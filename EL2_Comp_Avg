import h5py
import numpy as np
import matplotlib.pyplot as plt

directory = 'C:/Users/au617007/PycharmProjects/Open-Source-Toolbox-for-Rapid-and-Accurate-Photographic-Characterization-of-Optical-Propagation/Figures/'

file1 = '1350nm'
file2 = '1525nm'
file3 = '1933nm'

# Define file paths for the three different .h5 files
file_paths_TM = [directory + file1 + "_TM.h5",
                 directory + file2 + "_TM.h5",
                 directory + file3 + "_TM.h5"]

file_paths_TE = [directory + file1 + "_TE.h5",
                 directory + file2 + "_TE.h5",
                 directory + file3 + "_TE.h5"]

# Define offsets for staggering the plots on the y-axis
y_offsets = [0, 0.15, 0.4]  # Adjust these values as needed

# Initialize lists to accumulate the losses for averaging
all_tm_losses = []
all_te_losses = []
tm_wavelengths_list = []
te_wavelengths_list = []

# Plot the data from each file
plt.figure(figsize=(10, 6))
colors = ['blue', 'green', 'red']  # Colors for each dataset

# Process TM files
for i, file_path_TM in enumerate(file_paths_TM):
    with h5py.File(file_path_TM, "r") as hf_TM:
        tm_wavelengths = hf_TM["wavelengths"][:]  # Load TM wavelengths dataset
        tm_loss = hf_TM["Average TM loss (dB per cm)"][:]  # Load average TM loss dataset

        # Normalize the data to its maximum value
        tm_loss_normalized = tm_loss / tm_loss.max()

        # Accumulate the wavelengths and normalized losses for averaging
        tm_wavelengths_list.append(tm_wavelengths)
        all_tm_losses.append(tm_loss_normalized)

        # Apply the y-offset to stagger the plots
        tm_loss_staggered = tm_loss_normalized + y_offsets[i]

        # Plot the staggered TM data
        plt.plot(tm_wavelengths, tm_loss_staggered, linewidth=3, color=colors[i], label=f'TM {file1 if i == 0 else file2 if i == 1 else file3}')

# Process TE files
for i, file_path_TE in enumerate(file_paths_TE):
    with h5py.File(file_path_TE, "r") as hf_TE:
        te_wavelengths = hf_TE["wavelengths"][:]  # Load TE wavelengths dataset
        te_loss = hf_TE["Average TE loss (dB per cm)"][:]  # Load average TE loss dataset

        # Normalize the data to its maximum value
        te_loss_normalized = te_loss / te_loss.max()

        # Accumulate the wavelengths and normalized losses for averaging
        te_wavelengths_list.append(te_wavelengths)
        all_te_losses.append(te_loss_normalized)

        # Apply the y-offset to stagger the plots
        te_loss_staggered = te_loss_normalized + y_offsets[i]

        # Plot the staggered TE data
        plt.plot(te_wavelengths, te_loss_staggered, linewidth=3, linestyle='--', color=colors[i], label=f'TE {file1 if i == 0 else file2 if i == 1 else file3}')

# Compute the average of all the TM and TE losses separately
print(len(all_tm_losses[]))
avg_tm_loss = np.mean(all_tm_losses, axis=0)
avg_te_loss = np.mean(all_te_losses, axis=0)

# Plot the averaged TM and TE losses (without any offsets)
plt.plot(tm_wavelengths_list[0], avg_tm_loss, linewidth=3, color='black', linestyle='-', label='Average TM')
plt.plot(te_wavelengths_list[0], avg_te_loss, linewidth=3, color='black', linestyle='--', label='Average TE')

# Customize the plot
plt.xlim(910, 980)
plt.xlabel('Wavelength [nm]', fontsize=20)
plt.ylabel('Loss [Arbitrary units]', fontsize=20)
plt.xticks(fontsize=16)
plt.yticks(fontsize=16)
plt.legend(fontsize=12)
plt.grid(True)
plt.show()
