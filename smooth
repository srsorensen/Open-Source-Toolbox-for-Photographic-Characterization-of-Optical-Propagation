# -*- coding: utf-8 -*-
"""
Created on Tue Dec  5 11:39:55 2023

@author: frede
"""

import numpy as np
import h5py
import os
import matplotlib.pyplot as plt
from scipy.signal import savgol_filter
from itertools import zip_longest
import pandas as pd
#import klepto

def weighted_mean(values, weights):
    if len(values) == 1:
        return values[0], weights[0]
    if type(values) == list:
        values = np.array(values)
        weights = np.array(weights)
    weights = 1 / weights
    weighted_mean = np.sum(values * weights) / np.sum(weights)
    weighted_std = np.sqrt(np.sum(weights * (values - weighted_mean) ** 2) / np.sum(weights))
    return weighted_mean, weighted_std


def plot_polarization_data(wavelengths, data, data_wav, polarization_label, color, weights,file):
    if len(data) > 0:
        dataframe = pd.DataFrame(columns=wavelengths)
        dataframe_weights = pd.DataFrame(columns=wavelengths)
        for i in range(len(data)):
            series = pd.Series(data[i], index=data_wav[i])
            dataframe = pd.concat([dataframe, series.to_frame().T], ignore_index=True)
        for i in range(len(weights)):
            series = pd.Series(weights[i], index=data_wav[i])
            dataframe_weights = pd.concat([dataframe_weights, series.to_frame().T], ignore_index=True)
        dataframe = dataframe.dropna(axis=1)
        dataframe_weights = dataframe_weights.dropna(axis=1)
        for i in range(len(dataframe)):
            alpha_data = dataframe.iloc[i, :]
            wav_data = dataframe.columns.values
            alpha_data = pd.to_numeric(alpha_data, errors='coerce')
            wav_data = pd.to_numeric(wav_data, errors='coerce')
            plt.plot(wav_data, alpha_data, f"{color}-", label=f"{polarization_label}")
        #    plt.ylim(20,90)
            #plt.legend()
        #    plt.title(file[i])
        plt.ylabel('Propagation loss (dB/cm)')
        plt.xlabel('Wavelength (nm)')
        plt.show()
        weighted_average_sweep = []
        weighted_std_sweep = []
        for i in range((dataframe.shape[1])):
            column = dataframe.iloc[:, i]
            col_weights = dataframe_weights.iloc[:, i]
            mean, std = weighted_mean(column, col_weights)
            weighted_average_sweep.append(mean)
            weighted_std_sweep.append(std)

        weighted_average_sweep = pd.Series(weighted_average_sweep, index=dataframe_weights.columns)
        weighted_std_sweep = pd.Series(weighted_std_sweep, index=dataframe_weights.columns)
        return dataframe, weighted_average_sweep, weighted_std_sweep
    else:
        return pd.DataFrame(), pd.DataFrame(), pd.DataFrame()

def simple_moving_average(data, window_size):
    weights = np.ones(window_size) / window_size
    sma = np.convolve(data, weights, mode='valid')
    return sma

def load_data(directory,contains,f_ending,threshold,alpha_threshold_high,alpha_threshold_low,r_squared_threshold,window_size):

    TE_raw = []
    TM_raw = []

    TE_file = []
    TM_file = []

    TE_sma = []
    TM_sma = []

    TE_sav = []
    TM_sav = []

    TE_weights_sma = []
    TM_weights_sma = []

    TE_weights_sav = []
    TM_weights_sav = []


    TE_wav_sma = []
    TM_wav_sma = []

    TE_wav_sav = []
    TM_wav_sav = []

    TE_r_squared = []
    TM_r_squared = []

    TE_left_indent = []
    TM_left_indent = []

    TE_sum_width = []
    TM_sum_width = []

    for file in os.listdir(directory):
        if contains.lower() in file.lower() and f_ending.lower() in file.lower():
            #print(file)
            hf = h5py.File(directory + file, 'r')
            wav_nm = np.array(hf.get('wavelength'))
            weights = np.array(hf.get('alpha_variance'))
            left_indent = np.array(hf.get('left_indent'))
            sum_width = np.array(hf.get('sum_width'))
            r_squared = np.array(hf.get('r_squared'))
            alphas = np.array(hf.get('alpha'))
            if threshold:
                indices_above_threshold = np.where(alphas > alpha_threshold_high)[0]
                alphas = alphas[alphas <= alpha_threshold_high]
                wav_nm = np.delete(wav_nm, indices_above_threshold)
                weights = np.delete(weights, indices_above_threshold)
                left_indent = np.delete(left_indent, indices_above_threshold)
                sum_width = np.delete(sum_width, indices_above_threshold)
                r_squared = np.delete(r_squared, indices_above_threshold)

                indices_below_threshold = np.where(alphas < alpha_threshold_low)[0]
                alphas = alphas[alphas >= alpha_threshold_low]
                wav_nm = np.delete(wav_nm, indices_below_threshold)
                weights = np.delete(weights, indices_below_threshold)
                left_indent = np.delete(left_indent, indices_below_threshold)
                sum_width = np.delete(sum_width, indices_below_threshold)
                r_squared = np.delete(r_squared, indices_below_threshold)

                indices_above_threshold = np.where(r_squared < r_squared_threshold)[0]
                alphas = np.delete(alphas,indices_above_threshold)
                wav_nm = np.delete(wav_nm, indices_above_threshold)
                weights = np.delete(weights, indices_above_threshold)
                left_indent = np.delete(left_indent, indices_above_threshold)
                sum_width = np.delete(sum_width, indices_above_threshold)
                r_squared = np.delete(r_squared, indices_above_threshold)

            sma = simple_moving_average(alphas,window_size)
            weights_sma = simple_moving_average(weights,window_size)
            wav_sma = wav_nm[(window_size - 1) // 2 : -(window_size // 2)]

            y_savgol = savgol_filter(alphas.tolist(), 501, 1, mode="nearest")

            if "TE" in file:
                TE_file.append(file)
                TE_raw.append(list(alphas))
                TE_sma.append(list(sma))
                TE_weights_sma.append(weights_sma)
                TE_wav_sma.append(list(wav_sma))

                TE_sav.append(list(y_savgol))
                TE_weights_sav.append(weights)
                TE_wav_sav.append(([float(x.decode()) for x in wav_nm]))

                TE_r_squared.append(r_squared)
                TE_left_indent.append(left_indent)
                TE_sum_width.append(sum_width)

            else:
                TM_file.append(file)
                TM_raw.append(list(alphas))
                TM_sma.append(list(sma))
                TM_weights_sma.append(weights_sma)
                TM_wav_sma.append(list(wav_sma))

                TM_sav.append(list(y_savgol))
                TM_weights_sav.append(weights)
                TM_wav_sav.append(([float(x.decode()) for x in wav_nm]))

                TM_r_squared.append(r_squared)
                TM_left_indent.append(left_indent)
                TM_sum_width.append(sum_width)
            hf.close()
    return TE_file, TE_raw, TE_sma, TE_weights_sma, TE_wav_sma, TE_sav, TE_weights_sav, TE_wav_sav, TE_r_squared, TE_left_indent, TE_sum_width, TM_file, TM_raw, TM_sma, TM_weights_sma, TM_wav_sma, TM_sav, TM_weights_sav, TM_wav_sav, TM_r_squared, TM_left_indent, TE_sum_width

directory = 'C:/Users/au617007/OneDrive - Aarhus Universitet/Desktop/AlGaAs_Power/'
contains = 'optimized_2'
f_ending = '.h5'
threshold = True
alpha_threshold_high = 85
alpha_threshold_low = 20
r_squared_threshold = 0.2

#window_size = list(range(10,110,20))
#for i in window_size:
TE_file, TE_raw, TE_sma, TE_weights_sma, TE_wav_sma, TE_sav, TE_weights_sav, TE_wav_sav, TE_r_squared, TE_left_indent, TE_sum_width, TM_file, TM_raw, TM_sma, TM_weights_sma, TM_wav_sma, TM_sav, TM_weights_sav, TM_wav_sav, TM_r_squared, TM_left_indent, TE_sum_width  = load_data(directory,contains,f_ending,threshold,alpha_threshold_high,alpha_threshold_low,r_squared_threshold,20)

for i in range(2):
    plt.scatter(TE_wav_sav[i],TE_r_squared[i])
plt.show()

for i in range(2):
    plt.scatter(TE_wav_sma[i],TE_sma[i])
plt.show()

dataframe_wav = np.round(np.arange(910, 980 + 0.001, 0.1), 1)

plot_fontsize = 15
te_dataframe, te_mean, te_std = plot_polarization_data(dataframe_wav, TE_sma, TE_wav_sma, "TE", "b",TE_weights_sma, TE_file)
#te_dataframe1, te_mean1, te_std1 = plot_polarization_data(dataframe_wav, TE_sav, TE_wav_sav, "TE", "r",TE_weights_sav, TE_file)

tm_dataframe, tm_mean, tm_std = plot_polarization_data(dataframe_wav, TM_sma, TM_wav_sma, "TM", "g",TM_weights_sma, TM_file)
handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys())


tm_mean.index = pd.to_numeric(tm_mean.index, errors='coerce')
te_mean.index = pd.to_numeric(te_mean.index, errors='coerce')

# Define the range
start_wavelength = 920
end_wavelength = 940

# Filter the Series based on the index values
filtered_te_mean = te_mean[(te_mean.index >= start_wavelength) & (te_mean.index <= end_wavelength)]

# Find the maximum value in the filtered Series
max_value = filtered_te_mean.max()

print("Maximum value in the range 920-940 nm:", max_value)



c1 = 'k'
c2 = 'b'

plt.plot(te_mean.index, te_mean.values, color=c1, label = 'TE with threshold alpha: ' + '(' + str(alpha_threshold_low) + ':' + str(alpha_threshold_high) + ') ' +  'Rsq :' + str(r_squared_threshold))
plt.fill_between(te_mean.index, te_mean.values - te_std.values, te_mean.values + te_std.values, color=c1, alpha=0.2)
plt.plot(te_mean.index, te_mean.values + te_std.values, linestyle='--', color=c1, alpha=0.2)
plt.plot(te_mean.index, te_mean.values - te_std.values, linestyle='--', color=c1, alpha=0.2)

plt.xlabel('Wavelength (nm)', fontsize=plot_fontsize)
plt.ylabel('Propagation loss (dB/cm)', fontsize=plot_fontsize)
plt.xlim(te_mean.index.min(), te_mean.index.max())
plt.xticks(fontsize=plot_fontsize)
plt.yticks(fontsize=plot_fontsize)
plt.legend()
plt.show()
